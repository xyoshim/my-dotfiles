[user]
name = "MVA"
email = "mva000@gmail.com"

[ui]
ui.color = "auto" # the default
# ui.color = never # no color

# editor = ["C:\\Program Files\\Git\\usr\\bin\\vim.exe", "--literal"]
editor = ["D:/progs/sakura-x64/sakura.exe"]
pager=["C:/Program Files/Git/usr/bin/less.exe", "-FRX"]
paginate = "auto"

ui.diff-editor = ":builtin" # default, internal TUI tool
# ui.diff-editor = "meld"
# ui.diff-editor = "vimdiff"

# ui.merge-editor = "meld" # default
ui.merge-editor = "vscode"
# ui.merge-editor = "vimdiff"
# ui.merge-editor = "kdiff3"

[alias]
bsh=["bookmark", "move", "--to", "@-", "--from"]
alog=["log", "-r", "..@"]
rlog=["log", "-r"]
clog=["log", "-T", "builtin_log_comfortable"]
calog=["log", "-r", "..@", "-T", "builtin_log_comfortable"]
crlog=["log", "-T", "builtin_log_comfortable", "-r"]
dlog=["log", "-T", "builtin_log_detailed"]
dalog=["log", "-r", "..@", "-T", "builtin_log_detailed"]
drlog=["log", "-T", "builtin_log_detailed", "-r"]
olog=["log", "-T", "builtin_log_oneline"]
oalog=["log", "-r", "..@", "-T", "builtin_log_oneline"]
orlog=["log", "-T", "builtin_log_oneline", "-r"]
rootlog=["log", "-r", "root()::"]
crootlog=["log", "-T", "builtin_log_comfortable", "-r", "root()::"]
drootlog=["log", "-T", "builtin_log_detailed", "-r", "root()::"]
orootlog=["log", "-T", "builtin_log_oneline", "-r", "root()::"]

# Change the default push/fetch remote for `jj git push` and `jj git fetch`
# git.fetch = "upstream"
# git.push = "myfork"

#
# install <https://martinvonz.github.io/jj/latest/install-and-setup/>
#
# Will put the jj binary for the latest release in ~/.cargo/bin by default
# $ cargo binstall --strategies crate-meta-data jj-cli
# Without the --strategies option, you may get equivalent binaries that should be compiled from the same source code.
#
# From Source¶
# First make sure that you have the libssl-dev, openssl, pkg-config, and build-essential packages installed by running something like this:
# sudo apt-get install libssl-dev openssl pkg-config build-essential
# Now run either:
# # To install the *prerelease* version from the main branch
# cargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jj-cli
# or:
# # To install the latest release
# cargo install --locked --bin jj jj-cli
#
# <https://zenn.dev/zetamatta/books/c1e309aea68960/viewer/07_git>
# # 既存のgitリポジトリをクローンする
#   jj git clone https://github.com/hymkor/go-htnblog.git
#
# # 新規にjjのリポジトリを作成する
#   jj git init
# # 既存のgitリポジトリと関連付ける
#   jj git remote add origin (URL)
# # 既存gitリポジトリのmainブランチをトラッキングするローカルブランチを作成する
#   jj bookmark create -r @- main
# # git clone済のローカルブランチでjjを使えるようにする
#   jj git init --colocate
#
# <https://zenn.dev/zetamatta/books/c1e309aea68960/viewer/08_misc>
#
# だいたい git と同じもの
# git jj
# git restore jj restore
# git diff jj diff
# git commit --amend -a jj squash
# git switch <bookmark> jj new <bookmark>
#
# リビジョン指定(revset)
# 指定 意味
# @ 現在の作業コピー
# foo- foo の親
# foo+ foo の子
# foo:: foo の子孫(fooを含む)
# ::foo foo の先祖(fooを含む)
# foo::bar fooからbar(foo、barを含む)
# foo.. foo の子孫(fooを含まない)
# ..foo foo の先祖(fooを含まない)
# foo..bar fooからbar(foo、barを含まない)
# tags() 全てのタグ
# latest(foo) foo のうちの最も新しいもの
# root() ルートコミット

# # completion for bash
# source <(jj util completion bash)
#
# # 新規にブランチfutureを作成する
# jj bookmark create -r @- future
#
# # jj newやjj commit後にブランチ(main)を先頭(@の直前)へ移動する
# jj bookmark move --from main --to @-
#
# # jj bookmark set後にgitのブランチ(main)の先頭をHEADにする
# git switch main
#
# # コミットaaa以降をコミットbbbにまとめる
# jj squash --from aaa:: --into bbb
#
# # 作業ブランチをmainからBBBに移動する(作業ブランチはコミット済みとする)
# jj new BBB
